section .bss
    num1 resb 10        ; Reserve 10 bytes for the first number
    num2 resb 10        ; Reserve 10 bytes for the second number
    result resb 20      ; Reserve 20 bytes for the result

section .data
    msg1 db "Enter first number: ", 0
    msg1_len equ $ - msg1
    msg2 db "Enter second number: ", 0
    msg2_len equ $ - msg2
    msg_result db "Result: ", 0
    msg_result_len equ $ - msg_result
    newline db 0xA
    newline_len equ $ - newline

section .text
    global _start

_start:
    ; Prompt for the first number
    mov rax, 1                  ; syscall: write
    mov rdi, 1                  ; file descriptor: stdout
    mov rsi, msg1               ; address of the message
    mov rdx, msg1_len           ; length of the message
    syscall

    ; Read the first number
    mov rax, 0                  ; syscall: read
    mov rdi, 0                  ; file descriptor: stdin
    mov rsi, num1               ; buffer for input
    mov rdx, 10                 ; max input length
    syscall

    ; Convert first number to integer
    mov rsi, num1               ; Address of the first number
    call str_to_int             ; Convert string to integer
    mov rbx, rax                ; Store the first number in rbx

    ; Prompt for the second number
    mov rax, 1
    mov rdi, 1
    mov rsi, msg2
    mov rdx, msg2_len
    syscall

    ; Read the second number
    mov rax, 0
    mov rdi, 0
    mov rsi, num2
    mov rdx, 10
    syscall

    ; Convert second number to integer
    mov rsi, num2
    call str_to_int
    mov rcx, rax                ; Store the second number in rcx

    ; Perform addition
    add rbx, rcx                ; rbx = rbx + rcx

    ; Convert result to string
    mov rax, rbx                ; Move the result to rax
    call int_to_str             ; Convert integer to string

    ; Print the result
    mov rax, 1                  ; syscall: write
    mov rdi, 1                  ; file descriptor: stdout
    mov rsi, msg_result         ; Message: "Result: "
    mov rdx, msg_result_len
    syscall

    mov rax, 1
    mov rdi, 1
    mov rsi, result             ; Result string
    mov rdx, 20                 ; Max result length
    syscall

    ; Exit the program
    mov rax, 60                 ; syscall: exit
    xor rdi, rdi                ; exit code 0
    syscall

; Subroutine to convert string to integer
str_to_int:
    xor rax, rax                ; Clear rax (result)
    xor rdi, rdi                ; Clear rdi (index)

str_to_int_loop:
    mov dl, byte [rsi + rdi]    ; Load the next character
    cmp dl, 0xA                 ; Check for newline
    je str_to_int_done          ; Exit loop on newline
    sub dl, '0'                 ; Convert ASCII to integer
    imul rax, rax, 10           ; Multiply rax by 10
    add rax, rdx                ; Add the digit to rax
    inc rdi                     ; Move to the next character
    jmp str_to_int_loop

str_to_int_done:
    ret

; Subroutine to convert integer to string
int_to_str:
    xor rbx, rbx                ; Clear rbx (digit counter)
    mov rdi, result + 19        ; Start from the end of the buffer
    mov byte [rdi], 0           ; Null-terminate the string
    dec rdi                     ; Move back for digits

int_to_str_loop:
    xor rdx, rdx                ; Clear rdx
    mov rbx, 10                 ; Divisor 10
    div rbx                     ; Divide rax by 10, quotient in rax, remainder in rdx
    add dl, '0'                 ; Convert remainder to ASCII
    mov [rdi], dl               ; Store the digit in the buffer
    dec rdi                     ; Move back for the next digit
    test rax, rax               ; Check if quotient is zero
    jnz int_to_str_loop         ; Repeat until all digits are processed

    inc rdi                     ; Adjust pointer to the first digit
    mov rsi, rdi                ; Result string starts at rdi
    ret
