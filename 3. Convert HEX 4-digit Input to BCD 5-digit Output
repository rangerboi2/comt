section .bss
    hex_input resb 16       ; Space for input hex number (as string)
    bcd_result resb 20      ; Space for resulting BCD string (max 20 digits)

section .data
    prompt db "Enter 64-bit hex number: ", 0
    prompt_len equ $-prompt
    result_msg db "BCD representation: ", 0
    result_msg_len equ $-result_msg
    newline db 0xA
    newline_len equ $-newline

section .text
    global _start

_start:
    ; Prompt user for hex input
    mov rax, 1              ; sys_write
    mov rdi, 1              ; stdout
    mov rsi, prompt
    mov rdx, prompt_len
    syscall

    ; Read the input hex string
    mov rax, 0              ; sys_read
    mov rdi, 0              ; stdin
    mov rsi, hex_input
    mov rdx, 16             ; Max length for hex input
    syscall

    ; Null-terminate input string
    xor rax, rax
    find_null:
        cmp byte [hex_input + rax], 0xA ; Look for newline
        je terminate_input
        inc rax
        jmp find_null

    terminate_input:
        mov byte [hex_input + rax], 0

    ; Convert input hex string to integer
    mov rsi, hex_input       ; Input string pointer
    call hex_to_int          ; Convert hex string to rax

    ; Convert 64-bit integer to BCD
    mov rdi, rax             ; Load 64-bit integer into rdi
    call int_to_bcd          ; Convert to BCD, result in bcd_result

    ; Print the result message
    mov rax, 1               ; sys_write
    mov rdi, 1               ; stdout
    mov rsi, result_msg
    mov rdx, result_msg_len
    syscall

    ; Print the BCD result
    mov rax, 1               ; sys_write
    mov rdi, 1               ; stdout
    mov rsi, bcd_result
    mov rdx, rbx             ; BCD length stored in rbx
    syscall

    ; Print a newline
    mov rax, 1               ; sys_write
    mov rdi, 1               ; stdout
    mov rsi, newline
    mov rdx, newline_len
    syscall

    ; Exit program
    mov rax, 60              ; sys_exit
    xor rdi, rdi             ; Exit code 0
    syscall

; Convert hex string in rsi to 64-bit integer in rax
hex_to_int:
    xor rax, rax             ; Clear rax
    xor rcx, rcx             ; Clear rcx (digit counter)
next_char:
    mov dl, byte [rsi + rcx] ; Load next character
    cmp dl, 0                ; Check for null terminator
    je done_hex              ; End of string
    shl rax, 4               ; Shift rax left by 4 bits
    cmp dl, '0'
    jl invalid_input         ; Handle invalid input
    cmp dl, '9'
    jg check_alpha
    sub dl, '0'              ; Convert '0'-'9' to 0-9
    jmp store_digit
check_alpha:
    cmp dl, 'A'
    jl invalid_input
    cmp dl, 'F'
    jg invalid_input
    sub dl, 'A' - 10         ; Convert 'A'-'F' to 10-15
store_digit:
    or rax, rdx              ; Store digit in rax
    inc rcx                  ; Move to next character
    jmp next_char
done_hex:
    ret

invalid_input:
    mov rax, 60              ; sys_exit
    mov rdi, 1               ; Exit with error code 1
    syscall

; Convert 64-bit integer in rdi to BCD and store in bcd_result
int_to_bcd:
    xor rax, rax             ; Clear rax
    xor rbx, rbx             ; Clear rbx (index for BCD string)
    mov rcx, rdi             ; Load integer into rcx
    mov rdx, 0               ; Clear rdx (remainder)

bcd_loop:
    cmp rcx, 0               ; Check if number is zero
    je bcd_done
    mov rax, rcx             ; Move number to rax for division
    xor rdx, rdx             ; Clear rdx for division
    mov rsi, 10              ; Divisor
    div rsi                  ; Divide rax by 10, quotient in rax, remainder in rdx
    add dl, '0'              ; Convert remainder to ASCII
    mov byte [bcd_result + rbx], dl ; Store digit
    inc rbx                  ; Increment index
    mov rcx, rax             ; Update rcx with quotient
    jmp bcd_loop

bcd_done:
    mov byte [bcd_result + rbx], 0 ; Null-terminate BCD string
    dec rbx                  ; Adjust index to last valid digit
    xor rax, rax             ; Clear rax for reversing
reverse_bcd:
    cmp rbx, 0
    jl reverse_done
    mov dl, byte [bcd_result + rbx]
    mov byte [bcd_result + rax], dl
    inc rax
    dec rbx
    jmp reverse_bcd

reverse_done:
    mov rbx, rax             ; Store length of BCD string in rbx
    ret
